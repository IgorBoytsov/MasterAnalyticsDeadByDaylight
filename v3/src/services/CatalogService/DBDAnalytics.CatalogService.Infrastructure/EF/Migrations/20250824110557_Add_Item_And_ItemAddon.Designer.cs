// <auto-generated />
using System;
using DBDAnalytics.CatalogService.Infrastructure.EF.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DBDAnalytics.CatalogService.Infrastructure.EF.Migrations
{
    [DbContext(typeof(CatalogContext))]
    [Migration("20250824110557_Add_Item_And_ItemAddon")]
    partial class Add_Item_And_ItemAddon
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DBDAnalytics.CatalogService.Domain.Models.GameEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name")
                        .UseCollation("case_insensitive");

                    b.Property<int>("OldId")
                        .HasColumnType("integer")
                        .HasColumnName("OldId");

                    b.HasKey("Id");

                    b.ToTable("GameEvents", (string)null);
                });

            modelBuilder.Entity("DBDAnalytics.CatalogService.Domain.Models.GameMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name")
                        .UseCollation("case_insensitive");

                    b.Property<int>("OldId")
                        .HasColumnType("integer")
                        .HasColumnName("OldId");

                    b.HasKey("Id");

                    b.ToTable("GameModes", (string)null);
                });

            modelBuilder.Entity("DBDAnalytics.CatalogService.Domain.Models.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("ImageKey")
                        .HasColumnType("text")
                        .HasColumnName("ImageKey");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name")
                        .UseCollation("case_insensitive");

                    b.Property<int>("OldId")
                        .HasColumnType("integer")
                        .HasColumnName("OldId");

                    b.HasKey("Id");

                    b.ToTable("Item", (string)null);
                });

            modelBuilder.Entity("DBDAnalytics.CatalogService.Domain.Models.ItemAddon", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("ImageKey")
                        .HasColumnType("text")
                        .HasColumnName("ImageKey");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("ItemId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Name")
                        .UseCollation("case_insensitive");

                    b.Property<int>("OldId")
                        .HasColumnType("integer")
                        .HasColumnName("OldId");

                    b.Property<int?>("RarityId")
                        .HasColumnType("integer")
                        .HasColumnName("RarityId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemAddons", (string)null);
                });

            modelBuilder.Entity("DBDAnalytics.CatalogService.Domain.Models.Killer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("AbilityImageKey")
                        .HasColumnType("text")
                        .HasColumnName("AbilityImageKey");

                    b.Property<string>("KillerImageKey")
                        .HasColumnType("text")
                        .HasColumnName("KillerImageKey");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name")
                        .UseCollation("case_insensitive");

                    b.Property<int>("OldId")
                        .HasColumnType("integer")
                        .HasColumnName("OldId");

                    b.HasKey("Id");

                    b.ToTable("Killers", (string)null);
                });

            modelBuilder.Entity("DBDAnalytics.CatalogService.Domain.Models.KillerAddon", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("ImageKey")
                        .HasColumnType("text")
                        .HasColumnName("ImageKey");

                    b.Property<Guid>("KillerId")
                        .HasColumnType("uuid")
                        .HasColumnName("KillerId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name")
                        .UseCollation("case_insensitive");

                    b.Property<int>("OldId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("KillerId");

                    b.ToTable("KillerAddons", (string)null);
                });

            modelBuilder.Entity("DBDAnalytics.CatalogService.Domain.Models.KillerPerk", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("CategoryId");

                    b.Property<string>("ImageKey")
                        .HasColumnType("text")
                        .HasColumnName("ImageKey");

                    b.Property<Guid>("KillerId")
                        .HasColumnType("uuid")
                        .HasColumnName("KillerId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Name")
                        .UseCollation("case_insensitive");

                    b.Property<int>("OldId")
                        .HasColumnType("integer")
                        .HasColumnName("OldId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("KillerId");

                    b.ToTable("KillerPerks", (string)null);
                });

            modelBuilder.Entity("DBDAnalytics.CatalogService.Domain.Models.KillerPerkCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name")
                        .UseCollation("case_insensitive");

                    b.Property<int>("OldId")
                        .HasColumnType("integer")
                        .HasColumnName("OldId");

                    b.HasKey("Id");

                    b.ToTable("KillerPerkCategories", (string)null);
                });

            modelBuilder.Entity("DBDAnalytics.CatalogService.Domain.Models.Map", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("ImageKey")
                        .HasColumnType("text")
                        .HasColumnName("ImageKey");

                    b.Property<Guid>("MeasurementId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Name")
                        .UseCollation("case_insensitive");

                    b.Property<int>("OldId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementId");

                    b.ToTable("Maps", (string)null);
                });

            modelBuilder.Entity("DBDAnalytics.CatalogService.Domain.Models.Measurement", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .UseCollation("case_insensitive");

                    b.Property<int>("OldId")
                        .HasColumnType("integer")
                        .HasColumnName("OldId");

                    b.HasKey("Id");

                    b.ToTable("Measurements", (string)null);
                });

            modelBuilder.Entity("DBDAnalytics.CatalogService.Domain.Models.Offering", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("OfferingCategoryId");

                    b.Property<string>("ImageKey")
                        .HasColumnType("text")
                        .HasColumnName("ImageKey");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name")
                        .UseCollation("case_insensitive");

                    b.Property<int>("OldId")
                        .HasColumnType("integer")
                        .HasColumnName("OldId");

                    b.Property<int?>("RarityId")
                        .HasColumnType("integer")
                        .HasColumnName("RarityId");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("RarityId");

                    b.ToTable("Offerings", (string)null);
                });

            modelBuilder.Entity("DBDAnalytics.CatalogService.Domain.Models.OfferingCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name")
                        .UseCollation("case_insensitive");

                    b.Property<int>("OldId")
                        .HasColumnType("integer")
                        .HasColumnName("OldId");

                    b.HasKey("Id");

                    b.ToTable("OfferingCategories", (string)null);
                });

            modelBuilder.Entity("DBDAnalytics.CatalogService.Domain.Models.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name")
                        .UseCollation("case_insensitive");

                    b.Property<int>("OldId")
                        .HasColumnType("integer")
                        .HasColumnName("OldId");

                    b.HasKey("Id");

                    b.ToTable("Platforms", (string)null);
                });

            modelBuilder.Entity("DBDAnalytics.CatalogService.Domain.Models.PlayerAssociation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name")
                        .UseCollation("case_insensitive");

                    b.Property<int>("OldId")
                        .HasColumnType("integer")
                        .HasColumnName("OldId");

                    b.HasKey("Id");

                    b.ToTable("PlayerAssociations", (string)null);
                });

            modelBuilder.Entity("DBDAnalytics.CatalogService.Domain.Models.Rarity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name")
                        .UseCollation("case_insensitive");

                    b.Property<int>("OldId")
                        .HasColumnType("integer")
                        .HasColumnName("OldId");

                    b.HasKey("Id");

                    b.ToTable("Rarities", (string)null);
                });

            modelBuilder.Entity("DBDAnalytics.CatalogService.Domain.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name")
                        .UseCollation("case_insensitive");

                    b.Property<int>("OldId")
                        .HasColumnType("integer")
                        .HasColumnName("OldId");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("DBDAnalytics.CatalogService.Domain.Models.Survivor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("ImageKey")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name")
                        .UseCollation("case_insensitive");

                    b.Property<int>("OldId")
                        .HasColumnType("integer")
                        .HasColumnName("OldId");

                    b.HasKey("Id");

                    b.ToTable("Survivors", (string)null);
                });

            modelBuilder.Entity("DBDAnalytics.CatalogService.Domain.Models.SurvivorPerk", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("CategoryId");

                    b.Property<string>("ImageKey")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .UseCollation("case_insensitive");

                    b.Property<int>("OldId")
                        .HasColumnType("integer")
                        .HasColumnName("OldId");

                    b.Property<Guid>("SurvivorId")
                        .HasColumnType("uuid")
                        .HasColumnName("SurvivorId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SurvivorId");

                    b.ToTable("SurvivorPerks", (string)null);
                });

            modelBuilder.Entity("DBDAnalytics.CatalogService.Domain.Models.SurvivorPerkCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name")
                        .UseCollation("case_insensitive");

                    b.Property<int>("OldId")
                        .HasColumnType("integer")
                        .HasColumnName("OldId");

                    b.HasKey("Id");

                    b.ToTable("SurvivorPerkCategories", (string)null);
                });

            modelBuilder.Entity("DBDAnalytics.CatalogService.Domain.Models.TypeDeath", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name")
                        .UseCollation("case_insensitive");

                    b.Property<int>("OldId")
                        .HasColumnType("integer")
                        .HasColumnName("OldId");

                    b.HasKey("Id");

                    b.ToTable("TypeDeaths", (string)null);
                });

            modelBuilder.Entity("DBDAnalytics.CatalogService.Domain.Models.WhoPlacedMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name")
                        .UseCollation("case_insensitive");

                    b.Property<int>("OldId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("WhoPlacedMaps", (string)null);
                });

            modelBuilder.Entity("DBDAnalytics.CatalogService.Domain.Models.ItemAddon", b =>
                {
                    b.HasOne("DBDAnalytics.CatalogService.Domain.Models.Item", "Item")
                        .WithMany("ItemAddons")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("DBDAnalytics.CatalogService.Domain.Models.KillerAddon", b =>
                {
                    b.HasOne("DBDAnalytics.CatalogService.Domain.Models.Killer", "Killer")
                        .WithMany("KillerAddons")
                        .HasForeignKey("KillerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Killer");
                });

            modelBuilder.Entity("DBDAnalytics.CatalogService.Domain.Models.KillerPerk", b =>
                {
                    b.HasOne("DBDAnalytics.CatalogService.Domain.Models.KillerPerkCategory", "Category")
                        .WithMany("KillerPerks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DBDAnalytics.CatalogService.Domain.Models.Killer", "Killer")
                        .WithMany("KillerPerks")
                        .HasForeignKey("KillerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Killer");
                });

            modelBuilder.Entity("DBDAnalytics.CatalogService.Domain.Models.Map", b =>
                {
                    b.HasOne("DBDAnalytics.CatalogService.Domain.Models.Measurement", "Measurement")
                        .WithMany("Maps")
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Measurement");
                });

            modelBuilder.Entity("DBDAnalytics.CatalogService.Domain.Models.Offering", b =>
                {
                    b.HasOne("DBDAnalytics.CatalogService.Domain.Models.OfferingCategory", "OfferingCategory")
                        .WithMany("Offerings")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DBDAnalytics.CatalogService.Domain.Models.Rarity", "Rarity")
                        .WithMany("Offerings")
                        .HasForeignKey("RarityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("OfferingCategory");

                    b.Navigation("Rarity");
                });

            modelBuilder.Entity("DBDAnalytics.CatalogService.Domain.Models.SurvivorPerk", b =>
                {
                    b.HasOne("DBDAnalytics.CatalogService.Domain.Models.SurvivorPerkCategory", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DBDAnalytics.CatalogService.Domain.Models.Survivor", "Survivor")
                        .WithMany("SurvivorPerks")
                        .HasForeignKey("SurvivorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Survivor");
                });

            modelBuilder.Entity("DBDAnalytics.CatalogService.Domain.Models.Item", b =>
                {
                    b.Navigation("ItemAddons");
                });

            modelBuilder.Entity("DBDAnalytics.CatalogService.Domain.Models.Killer", b =>
                {
                    b.Navigation("KillerAddons");

                    b.Navigation("KillerPerks");
                });

            modelBuilder.Entity("DBDAnalytics.CatalogService.Domain.Models.KillerPerkCategory", b =>
                {
                    b.Navigation("KillerPerks");
                });

            modelBuilder.Entity("DBDAnalytics.CatalogService.Domain.Models.Measurement", b =>
                {
                    b.Navigation("Maps");
                });

            modelBuilder.Entity("DBDAnalytics.CatalogService.Domain.Models.OfferingCategory", b =>
                {
                    b.Navigation("Offerings");
                });

            modelBuilder.Entity("DBDAnalytics.CatalogService.Domain.Models.Rarity", b =>
                {
                    b.Navigation("Offerings");
                });

            modelBuilder.Entity("DBDAnalytics.CatalogService.Domain.Models.Survivor", b =>
                {
                    b.Navigation("SurvivorPerks");
                });
#pragma warning restore 612, 618
        }
    }
}
